<main>
    <div class="container-fluid">
        <div class="row py-3">
            <div class="col-12 text-center">
              <a href="https://thechessschool.net/home" class='float-left'><span id="logoBox"></span></a>
              <h2 id="titleText" class='mb-0'></h2>
              <h4 id="headerText"></h4>
            </div>
            <hr class='mt-0'>
        </div>
        <div class="row justify-content-center">
            <div class="col-6 px-0 pr-lg-2">
                <div class="infoBox mainBox float-right">
                    <div class="outlineBar text-center">
                        <div id="status"></div>
                    </div>
                    <div id="playerNames">
                        <div class="boxLabel" style="font-weight: bold">Players:</div>
                        <div id="players" class="text-display"></div>
                    </div>
                    <div id="connections">
                        <div class="boxLabel" style="font-weight: bold">Observers:</div>
                        <div id="observers" class="text-display"><i>none</i></div>
                    </div>
                    <div class="pgnDiv">
                        <div class="boxLabel"  style="font-weight: bold">Moves:</div>
                        <div id="pgn" class="textDisplay"></div>
                    </div>
                    <div class="chatContainer">
                        <div class="boxLabel"  style="font-weight: bold">Chat:</div>
                        <div id="chatBox">
                            <div id="chatDiv"></div>
                        </div>
                    </div>
                    <div class="outlineBar bottom">
                          <div id="chatTypeBox" class="playerInput justify-content-center">
                            <input id="inputMessage" placeholder="Type here..."/>
                            <button id="send" onClick=sendMessage()>Send</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-6 text-center px-0 pl-lg-2">
                <div class="infoBox chessBox mainBox">
                    <div id="statusPreview"></div>
                    <div id="expirationClock"></div>
                    <div id="topClock"></div>
                    <div id="topName" class="nameBox"></div>
                    <div class="embed-responsive embed-responsive-square">
                      <div id="myBoard" class="embed-responsive-item"></div>
                    </div>
                    <div id="bottomName" class="nameBox"></div>
                    <div id="bottomClock"></div>
                    <div id="promotionsChoice" class="playerInput">
                        <div id="proLabel"><span class="proPawn">&#9823;</span><span id="proText"></span></div>
                        <div id="proBtns" class="text-center">
                            <span onClick="setPromotions('q', 'proQ')" id="proQ" class="proPiece selected">&#9819;</span>
                            <span onClick="setPromotions('r', 'proR')" id="proR" class="proPiece">&#9820;</span>
                            <span onClick="setPromotions('b', 'proB')" id="proB" class="proPiece">&#9821;</span>
                            <span onClick="setPromotions('n', 'proN')" id="proN" class="proPiece">&#9822;</span>
                        </div>
                    </div>
                    <div class="playerInput drawBtn">
                        <button id="draw" type="button"></button>
                    </div>
                    <div class="playerInput resignBtn">
                        <button id="resign" type="button"></button>
                    </div>
                    <div id="flipButton">
                        <button id="flip" type="button">Rotate</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">

        let decodedJson = decodeURIComponent("{{{encodedJson}}}"), userData = JSON.parse(decodedJson), socket = io('/match'), 
        chatTime, alerted, override = false, moveTimeout, chatTimeout, statusTimeout, movesMade = [], promotionPiece = "q", nextPlayer = 'white', status, conStatus, initialStatus = true, resignation = false, gameEnd = false, chatMessages = [], topPlayer = "black", drawOffer = false, drawAccepted = false, oppCon = false, tcInterval, whiteTime, blackTime, lastMoveTime,
        whiteName = `<div id="whiteName"><span class="whiteArrow arrow">&#11157;</span> <span class="chessPiece white mainPiece"></span> <span id="whiteStatus" style="font-style: italic">(offline)</span></div>`,
        blackName = `<div id="blackName"><span class="blackArrow arrow">&#11157;</span> <span class="chessPiece black mainPiece"></span> <span id="blackStatus" style="font-style: italic">(offline)</span></div>`;
        userData.logo ? $('#logoBox').append(`<img src=${userData.logo}></img>`) : $("#logoBox").append(`<img src=/images/tcs-logo.png></img>`);
        let title  = 'The Chess School', header = userData.header;
        if (header && header.includes(': ')) {
          title  = header.split(': ')[0];
          header = header.split(': ')[1]
        }
        $('#titleText').html(title);
        if (header) $('#headerText').html(header);
        userData.player_color == "observer" ? $('.playerInput').hide() : $('#flipButton').hide();
        if (userData.player_color == "black") {
            topPlayer = "white";
            $('#topName').html(whiteName);
            $('#bottomName').html(blackName);
        }
        else {
            $('#topName').html(blackName);
            $('#bottomName').html(whiteName);
        };
        $(".whiteArrow").hide();
        $(".blackArrow").hide();
        $('#players').html(`
            <div>
                <span class="chessPiece white"></span>
                <span>${userData.white_rating ? `${userData.white_name} (${userData.white_rating})` : userData.white_name}</span>
            </div>
            <div>
                <span class="chessPiece black"></span>
                <span>${userData.black_rating ? `${userData.black_name} (${userData.black_rating})` : userData.black_name}</span>
            </div>
            `);
        $("#expirationClock").hide();
        $(document).ready(()=>{ 
            $('#flip').click(flipBoard) 
            $('#resign').click(()=>{ resignGame(); });
            $('#draw').click(()=>{ drawGame(); });
            if (userData.expiration) { expirationTimer(); };
            if (userData.time_clock) { timeClocks(); };
        });
        $(window).keydown((event)=>{ if (event.which === 13 && document.activeElement === document.getElementById('inputMessage')) { sendMessage(); }; });

        socket.on('connect', (data)=>{
            socket.emit('join', userData);
        });

        socket.on('disconnect', (data)=>{
            console.log("Disconnected from server");
            board.enableUserInput(false);
            $("#resign").attr("disabled", true);
            $("#draw").attr("disabled", true);
            $("#send").attr("disabled", true);
            initialStatus = true;
            clearTimeout(statusTimeout);
            statusTimeout = setTimeout(()=>{ resetConnections(); }, 5000);
        });

        socket.on('reconnect', ()=>{
            $("#resign").attr("disabled", false);
            $("#draw").attr("disabled", false);
            $("#send").attr("disabled", false);
        });

        socket.on('messages', (data)=>{
            console.log(data);
        });

        socket.on('alert', (data)=>{
            if (alerted != data) {
                alerted = data;
                board.enableUserInput(false);
                $("#resign").attr("disabled", true);
                $("#draw").attr("disabled", true);
                alert(`This game has been ended.\nStatus: ${data}`);
            };
        });

        socket.on('status', (data)=>{
            beforeSetConStatus(data);
        });

        socket.on('moves', (data)=>{
            console.log(`${movesMade.length < data.length - 1 ? "moves" : "move"} received`);
            clearTimeout(moveTimeout);
            displayMove(data);
        });

        socket.on('chat', (data)=>{
            console.log(`${chatMessages.length < data.length - 1 ? "messages" : "message"} received`);
            clearTimeout(chatTimeout);
            displayChat(data);
        });

        socket.on('draw', (data)=>{
            console.log("draw");
            if (userData.player_color != "observer" && data != userData.player_id) {
                let draw = confirm("Your opponent has offered a draw. Would you like to accept?");
                if (draw) {
                    gameEnd = "draw";
                    let drawData = {
                        fen: chess.fen(),
                        game_end: gameEnd,
                        resign: true,
                        move_id: movesMade.length,
                        pgn: chess.pgn()
                    };
                    console.log("draw accepted");
                    if (socket.connected) {
                        socket.emit('moveMade', drawData);
                        moveTimeout = setTimeout(()=>{
                            socket.close();
                            socket.open();
                        }, 500);
                    }
                    else {
                        socket.on('reconnect', ()=>{
                            socket.emit('moveMade', drawData);
                            moveTimeout = setTimeout(()=>{
                                socket.close();
                                socket.open();
                            }, 500);
                        });
                    };
                }
                else {
                    if (socket.connected) { socket.emit('decline', userData.player_id); }
                    else { socket.on('reconnect', ()=>{ socket.emit('decline', userData.player_id); }); };
                };
            };
        });

        socket.on('decline', (data)=>{
            if (userData.player_color != "observer" && data != userData.player_id) {
                alert("Your offer to draw was not accepted.\nPlease wait until a move is made before offering again.");
            };
        });

        setPromotions = (val, id)=>{
            promotionPiece = val;
            $('.proPiece').removeClass("selected");
            $(`#${id}`).addClass("selected");
        };

        resetConnections = ()=>{
            $('#whiteStatus').html(`(offline)`);
            $('#blackStatus').html(`(offline)`);
            $('#observers').html(`<i>none</i>`);
        };

        beforeSetConStatus = (res)=>{
            conStatus = res;
            clearTimeout(statusTimeout);
            if (!conStatus.some(e => e.id == userData.player_id)) {
                console.log("fail");
                socket.close();
                socket.open();
            } else
            if (initialStatus) {
                initialStatus = false;
                setConStatus();
            }
            else { statusTimeout = setTimeout(()=>{ setConStatus(); }, 10000); };
        };

        setConStatus = ()=>{
            resetConnections();
            let coaches = [], observers = [], oppCon = false;
            for (let user of conStatus) {
                if (user.id == (userData.player_color == "white" ? userData.black_id : userData.white_id)) { oppCon = true }
                if (user.color == "white") { $('#whiteStatus').empty(); } else
                if (user.color == "black") { $('#blackStatus').empty(); } else
                if (user.is_coach) { coaches.push(user) }
                else { observers.push(user); };
            };
            if (coaches.length !== 0 || observers.length !== 0) {
                $('#observers').empty();
                if (coaches.length !== 0) {
                    coaches.sort((a, b) => (a.name > b.name) ? 1 : -1);
                    for (coach of coaches) {  $('#observers').append(`&#9734; ${coach.name}<br/>`); }
                }
                if (observers.length !== 0) {
                    observers.sort((a, b) => (a.name > b.name) ? 1 : -1);
                    for (observer of observers) {  $('#observers').append(`${observer.name}<br/>`); }
                };
            };
            if (!oppCon) { $("#draw").attr("disabled", true); } else
            if (!drawOffer) { $("#draw").attr("disabled", false); };
            if (!oppCon && movesMade.length == 0 && userData.time_clock && userData.player_color == "white") {
                $('#status').html("Waiting for opponent to join the game.");
                board.enableUserInput(false);
                console.log("disable");
                override = true;
            } else
            if (movesMade.length == 0 && userData.time_clock && userData.player_color == "white") {
                $('#status').html("White to move.");
                board.enableUserInput();
                console.log("enable");
                override = false;
            };
        };

        resetGame = ()=>{
            board.setPosition(ChessUtils.FEN.startId);
            userData.player_color == "black" ? board.setOrientation(ChessUtils.ORIENTATION.black) : board.setOrientation(ChessUtils.ORIENTATION.white);
            chess.reset();
            board.enableUserInput(false);
            status = 'White to move.';
            nextPlayer = 'White';
            updateGameInfo();
        };

        updateGameInfo = (resId)=>{
            $('#status').html(status);
            $('#statusPreview').empty();
            if (chess.in_draw() || chess.in_threefold_repetition() || chess.in_stalemate()) { $('#statusPreview').html(`Draw!`) } else
            if (chess.in_checkmate()) { $('#statusPreview').html(`Checkmate!`); } else
            if (chess.in_check() && !resignation && !drawAccepted) { $('#statusPreview').html(`Check!`); } else
            if (resignation) { 
                $('#statusPreview').html(`${resId == userData.white_id 
                    ? `<span class="chessPiece white statusPiece"></span> Resigned!` 
                    : `<span class="chessPiece black statusPiece"></span> Resigned!`}`);
                $('#statusPreview').addClass('statusResign');
            } else
            if (drawAccepted) { $('#statusPreview').html(`Draw!`); };
            if (chess.in_draw() ||
                chess.in_threefold_repetition() ||
                chess.in_stalemate() ||
                chess.in_checkmate() ||
                gameEnd) {
                $("#resign").attr("disabled", true);
                $("#draw").attr("disabled", true);
            }
            $('#pgn').html(chess.pgn().replace(/ (?=\d+\.)/g, '<br/>'));
            document.getElementById("pgn").scrollTop = document.getElementById("pgn").scrollHeight;
            $(".whiteArrow").hide();
            $(".blackArrow").hide();
            if (!gameEnd) { nextPlayer == 'White' ? $(".whiteArrow").show() : $(".blackArrow").show(); };
        };

        flipBoard = ()=>{
            board.setOrientation(ChessUtils.ORIENTATION.flip);
            topPlayer = (topPlayer == "white") ? "black" : "white";
            let currentWhiteStatus = document.getElementById("whiteStatus").textContent,
            currentblackStatus = document.getElementById("blackStatus").textContent;
            $('#topName').html(topPlayer == "white" ? whiteName : blackName);
            $('#bottomName').html(topPlayer == "white" ? blackName : whiteName);
            $('#whiteStatus').html(currentWhiteStatus);
            $('#blackStatus').html(currentblackStatus);
            $(".whiteArrow").hide();
            $(".blackArrow").hide();
            if (!gameEnd) { nextPlayer == 'White' ? $(".whiteArrow").show() : $(".blackArrow").show(); };
        };

        changeGameStatus = ()=>{
            nextPlayer = 'White';
            if (chess.turn() === 'b') { nextPlayer = 'Black'; };
            if (chess.in_checkmate()) { gameEnd = (nextPlayer == 'White') ? "black" : "white", status = `CHECKMATE! ${nextPlayer == 'White' ? "Black" : "White"} wins!`; } else
            if (chess.in_draw() || chess.in_threefold_repetition() || chess.in_stalemate()) { gameEnd = "draw", status = 'DRAW!'; }
            else {
                status = `${nextPlayer} to move.`;
                if (chess.in_check()) { status = `CHECK! ${status}`; };
            };
            updateGameInfo();
        };

        pieceMove = (move)=>{
            let chessMove = chess.move({
              from: move.from,
              to: move.to,
              promotion: promotionPiece
            });
            if (chessMove !== null) {
                //movesMade.push(chessMove);
                changeGameStatus();
                let moveData = {
                    from: move.from,
                    to: move.to,
                    promotion: promotionPiece,
                    fen: chess.fen(),
                    game_end: gameEnd,
                    move_id: movesMade.length+1,
                    pgn: chess.pgn()
                };
                board.enableUserInput(false);
                console.log("move sent");
                console.log(chess.pgn());
                if (socket.connected) {
                    socket.emit('moveMade', moveData);
                    moveTimeout = setTimeout(()=>{
                        socket.close();
                        socket.open();
                    }, 500);
                }
                else {
                    socket.on('reconnect', ()=>{
                        socket.emit('moveMade', moveData);
                        moveTimeout = setTimeout(()=>{
                            socket.close();
                            socket.open();
                        }, 500);
                    });
                };
            };
            return chess.fen();
        };

        pieceSelected = (notationSquare)=>{
            let i, movesNotation, movesPosition = [];
            movesNotation = chess.moves({square: notationSquare, verbose: true});
            for (i = 0; i < movesNotation.length; i++) { movesPosition.push(ChessUtils.convertNotationSquareToIndex(movesNotation[i].to)); };
            return movesPosition;
        };

        displayMove = (res)=>{
            console.log(`moves recorded: ${movesMade.length}`);
            console.log(`total moves: ${res.length}`);
            drawOffer = false;
            if (oppCon) { $("#draw").attr("disabled", false); };
            if (movesMade.length < res.length) {
                console.log("displaying new moves");
                let n = res.length - movesMade.length;
                for (i = n-1; 0 <= i; i--) {  
                    if (!res[i].resign_id) {
                        let chessMove = chess.move({
                            from: res[i].from,
                            to: res[i].to,
                            promotion: res[i].promotion
                        });
                        movesMade.push(chessMove);
                        board.setPosition(res[i].fen);
                        changeGameStatus();
                        if (userData.time_clock) { 
                            mostRecentMove = i == 0 ? true : false;
                            timeClockCountdown(res[i].createdAt, mostRecentMove); 
                        };
                    }
                    else {
                        if (userData.time_clock) { clearInterval(tcInterval); };
                        if (res[i].resign_id == userData.white_id || res[i].resign_id == userData.black_id) {
                            resignation = true, gameEnd = (res.lastMove == "white") ? "black" : "white",
                            status = `RESIGNATION! ${res[i].resign_id == userData.white_id ? "White" : "Black"} has resigned!`;
                            updateGameInfo(res[i].resign_id);
                        } else
                        if (res[i].resign_id == "draw") {
                            drawAccepted = true, gameEnd = "draw", status = `DRAW! A draw has been accepted!`;
                            updateGameInfo();
                        }
                        else {
                            gameEnd = res[i].resign_id, status = res[i].status_message ? res[i].status_message : res[i].resign_id;
                            updateGameInfo();
                            $('#statusPreview').html(`${res[i].resign_id} wins!`);
                        };
                    };
                };
            };
            if (userData.player_color != "observer" &&
                userData.player_color == nextPlayer.toLowerCase() &&
                !chess.in_checkmate() &&
                !chess.in_draw() &&
                !chess.in_threefold_repetition() &&
                !chess.in_stalemate() &&
                !gameEnd &&
                !override) { 
                    board.enableUserInput(); 
                    console.log("enabling");
                }
            else { board.enableUserInput(false); };
        };

        sendMessage = () => {
            let message = $('#inputMessage').val();
            if (message && socket.connected) {
                $('#inputMessage').val('')
                let chatData = {
                    text: message,
                    fen: chess.fen(),
                };
                console.log("message sent");
                socket.emit('chat', chatData);
                chatTimeout = setTimeout(()=>{
                    socket.close();
                    socket.open();
                }, 500);
            };
        };

        displayChat = (res)=>{
            console.log(`messages recorded: ${chatMessages.length}`);
            console.log(`total messages: ${res.length}`);
            if (chatMessages.length < res.length) {
                console.log("displaying new messages");
                let n = res.length - chatMessages.length;
                for (i = n-1; 0 <= i; i--) {
                    chatMessages.push(res)
                    let newChatTime = new Date(res[i].createdAt);
                    localTime = newChatTime.toLocaleDateString(undefined, {
                        day:'2-digit',
                        month: '2-digit',
                        year: '2-digit',
                        minute: 'numeric',
                        hour: 'numeric'
                    });
                    if (chatMessages.length == 1) {
                        chatTime = newChatTime;
                    } else
                    if (newChatTime.getDate() == chatTime.getDate() &&
                        newChatTime.getUTCMonth() == chatTime.getUTCMonth() &&
                        newChatTime.getFullYear() == chatTime.getFullYear()) {
                        localTime = localTime.substring(10);
                    }
                    else { chatTime = newChatTime; }
                    $('#chatDiv').append(`
                        <div id="messageID${chatMessages.length}" class=${res[i].player_id == userData.white_id ? "whiteMessage" : "blackMessage"}>
                            [<span class="timeDisplay">${localTime}</span>] ${res[i].player_id == userData.white_id ? `<span class="chessPiece white"></span>` : `<span class="chessPiece black"></span>`}: ${res[i].player_message}
                        </div>
                    `);
                    document.getElementById("chatBox").scrollTop = document.getElementById("chatBox").scrollHeight;
                };
            };
        };

        resignGame = ()=>{
            let resign = confirm("Are you sure you want to resign?");
            if (resign && !resignation) {
                board.enableUserInput(false);
                $("#resign").attr("disabled", true);
                $("#draw").attr("disabled", true);
                gameEnd = (userData.player_color == "white") ? "black" : "white";
                let resignData = {
                    fen: chess.fen(),
                    game_end: gameEnd,
                    resign: true,
                    move_id: movesMade.length,
                    pgn: chess.pgn()
                };
                console.log("resignation sent");
                if (socket.connected) {
                    socket.emit('moveMade', resignData);
                    moveTimeout = setTimeout(()=>{
                        socket.close();
                        socket.open();
                    }, 500);
                }
                else {
                    socket.on('reconnect', ()=>{
                        socket.emit('moveMade', resignData);
                        moveTimeout = setTimeout(()=>{
                            socket.close();
                            socket.open();
                        }, 500);
                    })
                };
            };
        };

        drawGame = ()=>{
            let draw = confirm("Are you sure you want to offer a draw?");
            if (draw && !drawOffer) {
                $("#draw").attr("disabled", true);
                drawOffer = true;
                console.log("draw offered");
                if (socket.connected) { socket.emit('draw', userData.player_id); }
                else { socket.on('reconnect', ()=>{ socket.emit('draw', userData.player_id); }); };
            };
        };

        expirationTimer = ()=>{
            let expirationDate = new Date(userData.expiration).getTime(), expSoon,
            expireInterval = setInterval(function() {
                let now = new Date().getTime(), 
                distance = expirationDate - now, 
                days = String(Math.floor(distance / (1000 * 60 * 60 * 24))).padStart(2, '0'),
                hours = String(Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))).padStart(2, '0'),
                minutes = String(Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0'),
                seconds = String(Math.floor((distance % (1000 * 60)) / 1000)).padStart(2, '0');
                if (days == 0 && hours == 0 && minutes < 10) { expSoon = true }; 
                $('#expirationClock').html(expSoon ? `${hours}h ${minutes}m ${seconds}s` : `${days}d ${hours}h ${minutes}m`);
                $("#expirationClock").show();
                if (expSoon) { $('#expirationClock').addClass("expSoon"); };
                if (distance < 0) {
                    clearInterval(expireInterval);
                    $('#expirationClock').html("EXPIRED");
                    board.enableUserInput(false);
                    $("#resign").attr("disabled", true);
                    $("#draw").attr("disabled", true);
                    socket.emit('expired');
                };
            }, 1000);
        };

        timeClocks = ()=>{
            if (topPlayer == "black") {
                $('#topClock').addClass("blackClock");
                $('#bottomClock').addClass("whiteClock");
            }
            else {
                $('#topClock').addClass("whiteClock");
                $('#bottomClock').addClass("blackClock");
            };
            $('#topClock').html(`${userData.time_clock}m 00s`);
            $('#bottomClock').html(`${userData.time_clock}m 00s`);
            whiteTime = userData.time_clock * 60 * 1000, blackTime = userData.time_clock * 60 * 1000;
        };

        timeClockCountdown = (moveTime, mostRecentMove)=>{
            clearInterval(tcInterval);
            console.log(moveTime);
            console.log(nextPlayer);
            let bMins, bSecs, wMins, wSecs, distance;
            if (!lastMoveTime) { 
                    lastMoveTime = new Date(moveTime).getTime() 
                }
            else {
                let currentMoveTime = new Date(moveTime).getTime(), timeDif = lastMoveTime - currentMoveTime, now = new Date().getTime();
                distance = now - currentMoveTime;
                minutes = String(Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0'),
                seconds = String(Math.floor((distance % (1000 * 60)) / 1000)).padStart(2, '0');
                if (mostRecentMove) {console.log(`distance: ${minutes}m ${seconds}s`);};
                lastMoveTime = currentMoveTime;
                if (nextPlayer == "Black") {
                    whiteTime = whiteTime + timeDif;
                } 
                else { 
                    blackTime = blackTime + timeDif;
                };
            };
            let blackTemp = blackTime, whiteTemp = whiteTime;
            if (nextPlayer == "Black" && mostRecentMove) { blackTemp = blackTime - distance; } else
            if (nextPlayer == "White" && mostRecentMove) { whiteTemp = whiteTime - distance; }
            bMins = String(Math.floor((blackTemp % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0');
            bSecs = String(Math.floor((blackTemp % (1000 * 60)) / 1000)).padStart(2, '0');
            wMins = String(Math.floor((whiteTemp % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0');
            wSecs = String(Math.floor((whiteTemp % (1000 * 60)) / 1000)).padStart(2, '0');
            console.log (`whiteTime = ${whiteTime}: ${wMins}m ${wSecs}s`);
            console.log (`blackTime = ${blackTime}: ${bMins}m ${bSecs}s`);
            $('.whiteClock').html(`${wMins}m ${wSecs}s`);
            $('.blackClock').html(`${bMins}m ${bSecs}s`);
            let whiteInt = whiteTemp, blackInt = blackTemp;
            tcInterval = setInterval(function() {
                if (nextPlayer == "White") {
                    whiteInt = whiteInt - 1000;
                    mins = String(Math.floor((whiteInt % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0');
                    secs = String(Math.floor((whiteInt % (1000 * 60)) / 1000)).padStart(2, '0');
                    $('.whiteClock').html(`${mins}m ${secs}s`);
                }
                else {
                    blackInt = blackInt - 1000;
                    mins = String(Math.floor((blackInt % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0');
                    secs = String(Math.floor((blackInt % (1000 * 60)) / 1000)).padStart(2, '0');
                    $('.blackClock').html(`${mins}m ${secs}s`);
                };
            }, 1000);
        };

        let chess = new Chess(),
        board = new Chessboard('myBoard', {
            position: ChessUtils.FEN.startId,
            eventHandlers: {
                onPieceSelected: pieceSelected,
                onMove: pieceMove
            }
        });

        resetGame();

    </script>
</main>