<main>
    <p>Your color: {{player}}</p>
    <div id="myBoard" style="width: 100%; max-width: calc(100vh - 250px)"></div>
    <br/><br/>
    <label>Status:</label>
    <div id="status"></div>
    <br/>
    <label id="promotionsLabel">Select a piece for pawn promotions (you may change this at any time):</label>
    <div id="promotions">
        <input type="radio" id="queen" name="promotion" value="q" checked="default">
        <label for="queen">Queen</label>
        <input type="radio" id="rook" name="promotion" value="r">
        <label for="rook">Rook</label>
        <input type="radio" id="knight" name="promotion" value="n">
        <label for="knight">Knight</label>
        <input type="radio" id="bishop" name="promotion" value="b">
        <label for="bishop">Bishop</label>
    </div>
    <label id="flipLabel">Choose board perspective:</label>
    <div id="flip">
        <input type="radio" id="white" name="flip" value="white" checked="default">
        <label for="white">White</label>
        <input type="radio" id="black" name="flip" value="black">
        <label for="black">Black</label>
    </div>
    <br/>
    <label>PGN:</label>
    <div id="pgn"></div>
    <script type="text/javascript">

        let decodedJson = decodeURIComponent("{{{encodedJson}}}"), userData = JSON.parse(decodedJson), movesMade = [], promotionPiece = "q", observerInterval;
        userData.upToDate = false;
        console.log(userData);

        if (userData.player_id == "observer") {
            $('#promotionsLabel').hide();
            $('#promotions').hide();
        }
        else {
            $('#flipLabel').hide();
            $('#flip').hide();
        }

        $(document).ready(function(){ $('#promotions').change(function(){ promotionPiece = $("input[name='promotion']:checked").val(); }); });

        $(document).ready(function(){
            $('#flip').change(function(){
                $("input[name='flip']:checked").val() == "black" 
                    ? board.setOrientation(ChessUtils.ORIENTATION.black) 
                    : board.setOrientation(ChessUtils.ORIENTATION.white);
            });
        });

        resetGame = ()=>{
            board.setPosition(ChessUtils.FEN.startId);
            userData.player_color == "black" ? board.setOrientation(ChessUtils.ORIENTATION.black) : board.setOrientation(ChessUtils.ORIENTATION.white);
            chess.reset();
            updateGameInfo('Next player is white.');
        };

        updateGameInfo = (status)=>{
          $('#status').html(status);
          $('#pgn').html(chess.pgn());
        };

        getMovesFromServer = (playerData)=>{
            board.enableUserInput(false);
            console.log("asking for move");
            $.post("/getmove", playerData, (res)=>{ 
                if (res == "retry") { getMovesFromServer(playerData); }
                else {
                    console.log(res);
                    opponentMove(res);
                };
            });
        };

        pieceMove = (move)=>{
            let nextPlayer, status,
            chessMove = chess.move({
              from: move.from,
              to: move.to,
              promotion: promotionPiece
            });
            nextPlayer = 'white';
            if (chess.turn() === 'b') { nextPlayer = 'black'; };
            if (chessMove !== null) {
                movesMade.push(chessMove);
                if (chess.in_checkmate() === true) { status = 'CHECKMATE! Player ' + nextPlayer + ' lost.'; } 
                else if (chess.in_draw() === true) { status = 'DRAW!'; } 
                else {
                    status = 'Next player is ' + nextPlayer + '.';
                    if (chess.in_check() === true) { status = 'CHECK! ' + status; };
                };
                let moveData = {
                    player_id: userData.player_id,
                    match_id: userData.match_id,
                    player_color: userData.player_color,
                    from: move.from,
                    to: move.to,
                    promotion: promotionPiece,
                    fen: chess.fen(),
                };
                board.enableUserInput(false);
                console.log("sending move");
                $.post("/getmove", moveData, (res)=>{ 
                    if (res == "retry") { getMovesFromServer(moveData); }
                    else {
                        console.log(res);
                        opponentMove(res);
                    };
                });
                updateGameInfo(status); 
            };
            return chess.fen();
        };

        pieceSelected = (notationSquare)=>{
            let i, movesNotation, movesPosition = [];
            movesNotation = chess.moves({square: notationSquare, verbose: true});
            for (i = 0; i < movesNotation.length; i++) { movesPosition.push(ChessUtils.convertNotationSquareToIndex(movesNotation[i].to)); };
            return movesPosition;
        };

        opponentMove = (res)=>{
            console.log(movesMade.length < res.length);
            console.log(movesMade.length);
            console.log(res.length);
            if (movesMade.length < res.length) {
                console.log("moving");
                let n = res.length - movesMade.length;
                for (i = n; 0 < i; i--) {
                    let chessMove = chess.move({
                      from: res[i-1].from,
                      to: res[i-1].to,
                      promotion: res[i-1].promotion
                    });
                    movesMade.push(chessMove);
                    board.setPosition(res[i-1].fen);
                    console.log(chess.pgn());
                    nextPlayer = 'white';
                    let status;
                    if (chess.turn() === 'b') { nextPlayer = 'black'; }
                    if (chess.in_checkmate() === true) {
                        status = 'CHECKMATE! Player ' + nextPlayer + ' lost.';
                        clearInterval(observerInterval);
                    } 
                    else if (chess.in_draw() === true) { status = 'DRAW!'; }
                    else {
                        status = 'Next player is ' + nextPlayer + '.';
                        if (chess.in_check() === true) { status = 'CHECK! ' + status; }
                    }
                    updateGameInfo(status); 
                }
                userData.upToDate = true;
                if (userData.player_id != "observer") { getMovesFromServer(userData); };
            }
            else { if (userData.player_id != "observer") board.enableUserInput(); }
        };

        let chess = new Chess(),
        board = new Chessboard('myBoard', {
          position: ChessUtils.FEN.startId,
          eventHandlers: {
            onPieceSelected: pieceSelected,
            onMove: pieceMove
          }
        });

        resetGame();

        if (userData.player_id == "observer") { 
            getMovesFromServer(userData);
            observerInterval = setInterval(()=>{ getMovesFromServer(userData)}, 5000); 
        }
        else { getMovesFromServer(userData); };

    </script>
</main>